"use client";
import type { HttpMethod, PathsWithMethod } from "openapi-typescript-helpers";
import type { FetchOptions } from "openapi-fetch";
import { fetchClient } from "@/lib/fetch-client";
import { useMutation, type UseMutationOptions } from "@tanstack/react-query";
import type { paths } from "@/types/api-schema"; // generated by openapi-typescript

type Paths<M extends HttpMethod> = PathsWithMethod<paths, M>;
type Params<M extends HttpMethod, P extends Paths<M>> = M extends keyof paths[P]
  ? FetchOptions<paths[P][M]>
  : never;

type UpdatedUseMutationOptions = Pick<UseMutationOptions, "retry">;

export function usePostMutation<P extends Paths<"post">>(
  path: P,
  options?: UpdatedUseMutationOptions
) {
  return useMutation({
    mutationFn: (params: Params<"post", P>) =>
      fetchClient.POST(path, params).then(({ data }) => data),
    ...options,
  });
}
